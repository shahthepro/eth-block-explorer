// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches <LinkButton> snapshot 1`] = `
<Styled(styled.button)>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": false,
          "lastClassName": "dFydTy",
          "rules": Array [
            "
        background-color: rgba(0, 122, 255, 1);
        color: #fff;
        border: 0;
        padding: ",
            [Function],
            ";
        font-size: ",
            [Function],
            ";
        cursor: pointer;
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      
        &:disabled {
          background-color: #ccc;
          color: #888;
        }
      ",
            "
        background-color: transparent;
        color: rgba(0, 122, 255, 1);
        padding: 0;
        text-decoration: underline;
      
        &:hover {
          background-color: transparent;
          color: rgba(0, 122, 255, 0.8);    
        }
      
        &:disabled {
          cursor: default;
          background-color: transparent;
          color: rgba(122, 122, 122, 1);
        }
      ",
          ],
        },
        "displayName": "Styled(styled.button)",
        "foldedComponentIds": Array [
          "sc-bdVaJa",
        ],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <button
      className="sc-bdVaJa sc-htpNat dFydTy"
    />
  </StyledComponent>
</Styled(styled.button)>
`;

exports[`matches <PrimaryButton small> snapshot 1`] = `
<Styled(styled.button)
  small={true}
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "ggTxBu",
          "rules": Array [
            "
        background-color: rgba(0, 122, 255, 1);
        color: #fff;
        border: 0;
        padding: ",
            [Function],
            ";
        font-size: ",
            [Function],
            ";
        cursor: pointer;
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      
        &:disabled {
          background-color: #ccc;
          color: #888;
        }
      ",
            "
        background-color: rgba(0, 122, 255, 1);
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      ",
          ],
        },
        "displayName": "Styled(styled.button)",
        "foldedComponentIds": Array [
          "sc-bdVaJa",
        ],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    small={true}
  >
    <button
      className="sc-bdVaJa sc-bwzfXH ggTxBu"
    />
  </StyledComponent>
</Styled(styled.button)>
`;

exports[`matches <PrimaryButton> snapshot 1`] = `
<Styled(styled.button)>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": false,
          "lastClassName": "glLkgi",
          "rules": Array [
            "
        background-color: rgba(0, 122, 255, 1);
        color: #fff;
        border: 0;
        padding: ",
            [Function],
            ";
        font-size: ",
            [Function],
            ";
        cursor: pointer;
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      
        &:disabled {
          background-color: #ccc;
          color: #888;
        }
      ",
            "
        background-color: rgba(0, 122, 255, 1);
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      ",
          ],
        },
        "displayName": "Styled(styled.button)",
        "foldedComponentIds": Array [
          "sc-bdVaJa",
        ],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <button
      className="sc-bdVaJa sc-bwzfXH glLkgi"
    />
  </StyledComponent>
</Styled(styled.button)>
`;

exports[`matches <SecondaryButton small> snapshot 1`] = `
<Styled(styled.button)
  small={true}
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bxivhb",
          "isStatic": false,
          "lastClassName": "bSgQke",
          "rules": Array [
            "
        background-color: rgba(0, 122, 255, 1);
        color: #fff;
        border: 0;
        padding: ",
            [Function],
            ";
        font-size: ",
            [Function],
            ";
        cursor: pointer;
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      
        &:disabled {
          background-color: #ccc;
          color: #888;
        }
      ",
            "
        background-color: rgba(255, 122, 0, 1);
        &:hover {
          background-color: rgba(255, 122, 0, 0.8);
        }
      ",
          ],
        },
        "displayName": "Styled(styled.button)",
        "foldedComponentIds": Array [
          "sc-bdVaJa",
        ],
        "render": [Function],
        "styledComponentId": "sc-bxivhb",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    small={true}
  >
    <button
      className="sc-bdVaJa sc-bxivhb bSgQke"
    />
  </StyledComponent>
</Styled(styled.button)>
`;

exports[`matches <SecondaryButton> snapshot 1`] = `
<Styled(styled.button)>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bxivhb",
          "isStatic": false,
          "lastClassName": "gYfJUh",
          "rules": Array [
            "
        background-color: rgba(0, 122, 255, 1);
        color: #fff;
        border: 0;
        padding: ",
            [Function],
            ";
        font-size: ",
            [Function],
            ";
        cursor: pointer;
      
        &:hover {
          background-color: rgba(0, 122, 255, 0.8);
        }
      
        &:disabled {
          background-color: #ccc;
          color: #888;
        }
      ",
            "
        background-color: rgba(255, 122, 0, 1);
        &:hover {
          background-color: rgba(255, 122, 0, 0.8);
        }
      ",
          ],
        },
        "displayName": "Styled(styled.button)",
        "foldedComponentIds": Array [
          "sc-bdVaJa",
        ],
        "render": [Function],
        "styledComponentId": "sc-bxivhb",
        "target": "button",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <button
      className="sc-bdVaJa sc-bxivhb gYfJUh"
    />
  </StyledComponent>
</Styled(styled.button)>
`;
